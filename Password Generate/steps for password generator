🔐 Password Manager - Step-by-Step Explanation
1️⃣ Import Necessary Libraries
Tkinter: Used for creating the graphical user interface (GUI).
PIL (Pillow): Used for handling images in the GUI.
Messagebox: Provides pop-up message dialogs for user alerts.
Random (choice, randint, shuffle): Helps generate a secure random password.
Pyperclip: Copies the generated password to the clipboard for easy pasting.
2️⃣ Create the Password Generator Function
🔹 Define generate_password() to create a strong random password.
🔹 Use three character groups: letters, numbers, and symbols.
🔹 Randomly choose:

8-10 letters
2-4 symbols
2-4 numbers
🔹 Shuffle the characters to mix them.
🔹 Convert the shuffled list into a string and insert it into the password entry field.
🔹 Copy the password to the clipboard using pyperclip.copy().
3️⃣ Create the Save Password Function
🔹 Define save() to store website credentials.
🔹 Retrieve the website, email, and password from input fields.
🔹 Validate that no field is empty.
🔹 Show a confirmation pop-up using messagebox.askokcancel().
🔹 If the user confirms, save the details to data.txt in this format:
website | email | password
🔹 Clear the website and password fields after saving.

4️⃣ Design the Graphical User Interface (GUI)
A. Create the Main Window
✅ Use Tk() to create the application window.
✅ Set the title to "Password Manager".
✅ Add padding (padx=50, pady=50) to make the UI look better.

B. Add the Logo Image
✅ Use Canvas() to create a space for the image.
✅ Load the image (logo.png) using PIL (Image.open()).
✅ Convert the image to a format Tkinter can use (ImageTk.PhotoImage()).
✅ Display it at the center of the canvas.

C. Create Labels
✅ Add three labels for input fields:
"Website:"
"Email/Username:"
"Password:"
✅ Position labels properly using grid layout.
D. Create Input Fields
✅ Use Entry() to create text boxes for:

Website name
Email/Username (Pre-filled with default email)
Password (Empty, waiting for input)
✅ Focus on the website entry field when the app starts.
E. Add Buttons
✅ "Generate Password" button:

Calls generate_password() to create a strong password.
✅ "Add" button:

Calls save() to store credentials in a file.
5️⃣ Run the Application
✅ Call window.mainloop() to keep the GUI running until the user closes it.
